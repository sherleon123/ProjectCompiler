(3 + 4) * (2 - 1)
6 % 4
(Lambd x : (Lambd y : (x + y)))
FUN a(b,c) -> !(b+c==7)
a(3,4)
FUN a(b,c) -> ((b+c==7) AND (3==3)) OR (5==5)
a(3,4)
a(5,5)
(x>0)AND (y<10)
(3>0) WHILE (5<0)
(3<=5)
(5<5)
(Lambd x,y:x+y)(3,5)
(Lambd x:4)(5)

FUN a(b) -> a(b-1)+2
a(2)

FUN a(b) -> b
FUN c(d) -> d+2
a(c(3))

(2==3) # this is the comment feature
(Lambd x:x+3)(2)#works for lambda too
FUN a(b)->3 # and for functions


#to do a while loop with recursion we need an or statement between the desiered while statement such as n==0 or f(n-1) so that every time the function goes to a desiered variable until it reaches 0


